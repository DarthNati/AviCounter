<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Awesome Counter</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>

    <style>
        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            min-height: 100vh;
            background: linear-gradient(135deg, #1a1c2c 0%, #2a3c54 100%);
            color: white;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            padding: 2rem;
            position: relative;
        }

        .app-wrapper {
            display: grid;
            grid-template-columns: 1fr auto;
            gap: 2rem;
            margin-top: 2rem;
            position: relative;
        }

        .counter-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: transform 0.3s ease;
        }

        .counter-card:hover {
            transform: translateY(-5px);
        }

        h2 {
            font-size: 2.5rem;
            font-weight: 800;
            margin-bottom: 1.5rem;
            background: linear-gradient(to right, #ff6b6b, #ffd93d);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-align: center;
        }

        .counter {
            font-size: 5rem;
            font-weight: 800;
            text-align: center;
            margin: 1rem 0;
            color: #4ef9fe;
            text-shadow: 0 0 10px rgba(78, 249, 254, 0.5);
            transition: all 0.3s ease;
        }

        .input-code {
            margin: 2rem 0;
        }

        .input-code input {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            padding: 1rem;
            color: white;
            font-size: 1rem;
            width: 100%;
            transition: all 0.3s ease;
        }

        .input-code input:focus {
            outline: none;
            border-color: #4ef9fe;
            box-shadow: 0 0 15px rgba(78, 249, 254, 0.3);
        }

        .input-code input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .btn {
            background: linear-gradient(45deg, #ff6b6b, #ffd93d);
            border: none;
            border-radius: 12px;
            padding: 1rem 2rem;
            font-weight: 600;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            width: 100%;
            margin-top: 1rem;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn-success {
            background: linear-gradient(45deg, #00f2c3, #0098f0);
        }

        .leaderboard {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            width: 300px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            display: none;
        }

        .leaderboard h4 {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            text-align: center;
            background: linear-gradient(to right, #00f2c3, #0098f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .leaderboard ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .leaderboard li {
            background: rgba(255, 255, 255, 0.05);
            margin-bottom: 1rem;
            padding: 1rem;
            border-radius: 12px;
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: transform 0.3s ease;
        }

        .leaderboard li:hover {
            transform: translateX(10px);
            background: rgba(255, 255, 255, 0.1);
        }

        .medal {
            font-size: 1.5rem;
            filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.5));
        }

        .user-stats {
            flex: 1;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-name {
            font-weight: 600;
            background: linear-gradient(45deg, #ff6b6b, #ffd93d);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .press-count {
            background: rgba(255, 255, 255, 0.1);
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.9rem;
            color: #4ef9fe;
        }

        .alert-container {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            padding: 1rem;
            background: rgba(26, 28, 44, 0.9);
            backdrop-filter: blur(10px);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .alert {
            background: rgba(255, 107, 107, 0.1);
            border: 1px solid rgba(255, 107, 107, 0.2);
            color: #ff6b6b;
            border-radius: 12px;
            padding: 1rem;
            margin: 0;
            text-align: center;
            font-weight: 600;
        }

        @media (max-width: 768px) {
            .app-wrapper {
                grid-template-columns: 1fr;
            }

            .leaderboard {
                width: 100%;
            }

            .counter {
                font-size: 4rem;
            }
        }

        /* Animation classes */
        .fade-in {
            opacity: 0;
            transform: translateY(20px);
            animation: fadeIn 0.5s ease forwards;
        }

        @keyframes fadeIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
            100% {
                transform: scale(1);
            }
        }
    </style>
</head>
<body>

    <audio id="click-sound" src="https://raw.githubusercontent.com/DarthNati/AviCounter/refs/heads/main/mario.mp3" preload="auto"></audio>
    <div class="container">
        <div class="app-wrapper">
            <div class="counter-card fade-in">
                <h2>Avi Counter</h2>
                <div id="user-info" class="input-code">
                    <input type="text" id="code" class="form-control" placeholder="‚ú® Enter your secret code" required>
                    <button id="submit-code" class="btn">
                        <img src="https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/ad9e988f-fc92-4b5e-83ca-bcffbb33f48e/da2p11h-6c46c85b-bef7-49df-82b8-9284f892d428.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcL2FkOWU5ODhmLWZjOTItNGI1ZS04M2NhLWJjZmZiYjMzZjQ4ZVwvZGEycDExaC02YzQ2Yzg1Yi1iZWY3LTQ5ZGYtODJiOC05Mjg0Zjg5MmQ0MjgucG5nIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.N3Otm4uPWfBI4rcxr8vlfMuXuaH7ktfAmfOFqXtr3QU" alt="Start Counting" />
                    </button>
                </div>
                <div id="counter-section" style="display:none;">
                    <h3 id="user-name" class="text-center mb-4">Welcome, <span></span>!</h3>
                    <div id="counter" class="counter pulse">0</div>
                    <button id="increase-btn" class="btn btn-success">
                       <img src="https://github.com/DarthNati/AviCounter/blob/main/last.png?raw=true" alt="Start Counting" />  PRESS ME
                    </button>
                </div>
            </div>

            <div class="leaderboard fade-in" id="leaderboard">
                <h4>üêÄ Top Snitchers üêÄ</h4>
                <ul id="leaderboard-list">
                    <!-- Leaderboard items will be populated here -->
                </ul>
            </div>
        </div>
        <div class="alert-container">
            <div class="alert alert-danger" role="alert">
                NOTE: THIS TOOL WAS CREATED ON MY FREE TIME WHEN THE KIDS ARE SLEEPING !
            </div>
        </div>

        <script>
            // Get elements
            const submitButton = document.getElementById("submit-code");
            const clickSound = document.getElementById("click-sound");
            clickSound.volume = 0.2; // Set the volume to 30% of the maximum
            // Add event listener to play sound on button click
            submitButton.addEventListener("click", function() {
                clickSound.play();
            });
        </script>
<!-- Add an Audio element -->
<audio id="success-sound" src="https://raw.githubusercontent.com/DarthNati/AviCounter/refs/heads/main/buttonpress.mp3" preload="auto"></audio>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script>
const GITHUB_TOKEN = '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';
const GITHUB_REPO_OWNER = 'DarthNati';
const GITHUB_REPO_NAME = 'AviCounter';
const GITHUB_FILE_PATH = 'data.json';
const SOUND_FILE_PATH = 'sound.txt';

const userCodes = {
    2323: 'Galit',
    1212: 'Nati',
    1414: 'Nadav',
};

let currentUserName = '';
let lastSoundCount = null;


// Handle code submission
document.getElementById('submit-code').addEventListener('click', function () {
    const code = document.getElementById('code').value;
    const userName = userCodes[code];

    if (!userName) {
        alert('Invalid Code!');
        return;
    }

    currentUserName = userName;
    document.getElementById('user-name').querySelector('span').textContent = userName;
    document.getElementById('user-info').style.display = 'none';
    document.getElementById('counter-section').style.display = 'block';

    loadCounter(userName);
    loadLeaderboard();
    document.getElementById('leaderboard').style.display = 'block';

    setInterval(() => {
        loadCounter(userName);
        loadLeaderboard();
        checkSoundTrigger();
    }, 1000);
});

// Check for sound triggers
function checkSoundTrigger() {
    fetch(`https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/contents/${SOUND_FILE_PATH}`, {
        method: 'GET',
        headers: {
            'Authorization': `token ${GITHUB_TOKEN}`,
            'Accept': 'application/vnd.github.v3+json',
        },
    })
    .then(async (response) => {
        if (response.status === 404) {
            return { content: '0' };
        }
        return response.json();
    })
    .then((data) => {
        const currentCount = parseInt(atob(data.content));
        // Only play sound if lastSoundCount is not null (not first load) and count has increased
        if (lastSoundCount !== null && currentCount > lastSoundCount) {
            const successSound = document.getElementById('success-sound');
            successSound.play();
        }
        lastSoundCount = currentCount;
    })
    .catch((error) => console.error('Error checking sound trigger:', error));
}

function loadCounter() {
    fetch(`https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/contents/${GITHUB_FILE_PATH}`, {
        method: 'GET',
        headers: {
            'Authorization': `token ${GITHUB_TOKEN}`,
            'Accept': 'application/vnd.github.v3+json',
        },
    })
    .then(async (response) => {
        if (response.status === 404) {
            console.log('File not found. Initializing with an empty array.');
            return [];
        }
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Error fetching file: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        return JSON.parse(atob(data.content)) || [];
    })
    .then((content) => {
        const today = new Date().toISOString().split('T')[0]; // Get the current date
        const allActionsToday = content.filter((action) => action.date === today); // Count actions from all users for today
        document.getElementById('counter').textContent = allActionsToday.length + ' today'; // Set the counter to the total number of actions today
    })
    .catch((error) => console.error('Error fetching counter data:', error));
}


function loadLeaderboard() {
    fetch(`https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/contents/${GITHUB_FILE_PATH}`, {
        method: 'GET',
        headers: {
            'Authorization': `token ${GITHUB_TOKEN}`,
            'Accept': 'application/vnd.github.v3+json',
        },
    })
        .then(async (response) => {
            if (response.status === 404) {
                console.log('File not found. Initializing with an empty array.');
                return [];
            }
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Error fetching file: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            return JSON.parse(atob(data.content)) || [];
        })
        .then((content) => {
            const userPressCounts = {};

            content.forEach((action) => {
                userPressCounts[action.user] = (userPressCounts[action.user] || 0) + 1;
            });

            const sortedUsers = Object.entries(userPressCounts)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5);

            const medals = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'];
            const leaderboardList = document.getElementById('leaderboard-list');
            leaderboardList.innerHTML = '';
            
            sortedUsers.forEach(([user, count], index) => {
                const listItem = document.createElement('li');
                listItem.innerHTML = `
                    <span class="medal">${medals[index]}</span>
                    <div class="user-stats">
                        <span class="user-name">${user}</span>
                        <span class="press-count">${count} Snitches</span>
                    </div>
                `;
                leaderboardList.appendChild(listItem);
            });
        })
        .catch((error) => console.error('Error fetching leaderboard data:', error));
}

document.getElementById('increase-btn').addEventListener('click', function () {
                confetti({
                particleCount: 100,
                spread: 70,
                origin: { y: 0.6 }
            });
    const increaseButton = document.getElementById('increase-btn');
    increaseButton.disabled = true;
    setTimeout(function() {
        increaseButton.disabled = false;
    }, 20000);

    const today = new Date().toISOString().split('T')[0];
    const newAction = {
        user: currentUserName,
        date: today,
        timestamp: new Date().toISOString(),
    };

    // First update data.json
    fetch(`https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/contents/${GITHUB_FILE_PATH}`, {
        method: 'GET',
        headers: {
            'Authorization': `token ${GITHUB_TOKEN}`,
            'Accept': 'application/vnd.github.v3+json',
        },
    })
    .then(async (response) => {
        if (response.status === 404) {
            return { content: [], sha: null };
        }
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Error fetching file: ${response.status} - ${errorText}`);
        }
        const data = await response.json();
        return { content: JSON.parse(atob(data.content)) || [], sha: data.sha };
    })
    .then(({ content, sha }) => {
        content.push(newAction);
        const updatedContent = JSON.stringify(content);
        const encodedContent = btoa(updatedContent);

        return fetch(`https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/contents/${GITHUB_FILE_PATH}`, {
            method: 'PUT',
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json',
            },
            body: JSON.stringify({
                message: `Log action for ${currentUserName}`,
                content: encodedContent,
                sha: sha || undefined,
            }),
        });
    })
    .then((response) => {
        if (!response.ok) {
            throw new Error(`Error updating file: ${response.status}`);
        }
        // After successful data.json update, update sound.txt
        return fetch(`https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/contents/${SOUND_FILE_PATH}`, {
            method: 'GET',
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json',
            },
        });
    })
    .then(async (response) => {
        let currentCount = 0;
        let sha = null;
        
        if (response.ok) {
            const data = await response.json();
            currentCount = parseInt(atob(data.content)) || 0;
            sha = data.sha;
        }
        
        return fetch(`https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/contents/${SOUND_FILE_PATH}`, {
            method: 'PUT',
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json',
            },
            body: JSON.stringify({
                message: 'Update sound trigger',
                content: btoa((currentCount + 1).toString()),
                sha: sha,
            }),
        });
    })
    .then((response) => {
        if (!response.ok) {
            throw new Error(`Error updating sound file: ${response.status}`);
        }
        console.log('Action logged successfully.');
        loadCounter(currentUserName);
        loadLeaderboard();
        confetti();
    })
    .catch((error) => console.error('Error updating GitHub files:', error));
});
</script>

</body>
</html>
